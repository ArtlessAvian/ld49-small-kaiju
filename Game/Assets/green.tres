[gd_resource type="ShaderMaterial" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeVectorFunc" id=1]
function = 4

[sub_resource type="VisualShaderNodeVectorFunc" id=2]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( -0.05, 0, 0.3 ) ]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.0952782, 0.667969, 0.265296, 1 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=10]

[sub_resource type="VisualShader" id=11]
code = "shader_type spatial;
render_mode specular_schlick_ggx;




void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(0.095278, 0.667969, 0.265296);
	float n_out2p1 = 1.000000;

// VectorFunc:10
	vec3 n_out10p0;
	{
		vec3 c = n_out2p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out10p0 = vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// Input:6
	mat4 n_out6p0 = CAMERA_MATRIX;

// Input:3
	vec3 n_out3p0 = VERTEX;

// TransformVectorMult:7
	vec3 n_out7p0 = (n_out6p0 * vec4(n_out3p0, 1.0)).xyz;

// VectorDecompose:13
	float n_out13p0 = n_out7p0.x;
	float n_out13p1 = n_out7p0.y;
	float n_out13p2 = n_out7p0.z;

// VectorCompose:14
	vec3 n_out14p0 = vec3(n_out13p1, n_out13p1, n_out13p1);

// VectorOp:15
	vec3 n_in15p1 = vec3(-0.05000, 0.00000, 0.30000);
	vec3 n_out15p0 = n_out14p0 * n_in15p1;

// VectorOp:12
	vec3 n_out12p0 = n_out10p0 + n_out15p0;

// VectorFunc:11
	vec3 n_out11p0;
	{
		vec3 c = n_out12p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out11p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	ALBEDO = n_out11p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -557.451, -5.39124 )
nodes/fragment/0/position = Vector2( 440, 200 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -440, 180 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -1140, 380 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -1140, 300 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -900, 340 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -260, 180 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 120, 180 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -60, 220 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -660, 360 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -440, 360 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -240, 340 )
nodes/fragment/connections = PoolIntArray( 3, 0, 7, 1, 6, 0, 7, 0, 2, 0, 10, 0, 10, 0, 12, 0, 12, 0, 11, 0, 7, 0, 13, 0, 13, 1, 14, 0, 14, 0, 15, 0, 15, 0, 12, 1, 13, 1, 14, 1, 13, 1, 14, 2, 11, 0, 0, 0 )

[resource]
shader = SubResource( 11 )
